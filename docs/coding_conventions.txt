************************************************************************************************
Copyright 2014 Peter Clark

This file is part of Lifeline Engine.

Lifeline Engine is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Lifeline Engine is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Lifeline Engine.  If not, see <http://www.gnu.org/licenses/>.
************************************************************************************************

**** Warnings ****
Always code with warnings on, as many as reasonable (i.e. don't use warnings about padding 
size). Always strive to produce warning free code. This will help produce better, error free
code.

**** Class Naming ****
All lower case with underscores except for acronyms which will be uppercase.

**** Variable Naming ****
See "Class naming"

For private member variables use p_*
For public member variables on POD types no prefix is necessary.
Exclusively use getters/setters for non-POD types.

**** Templates ****

template<typename ...ARGS...>
return_type
function_name(
  arg1
  arg2
  ...)
{

}

Note the all uppercase used for template arguments

**** Constructor/Destructors ****
Prefer using constructors/destructors vs initialize/terminate (or other similar member function
scheme). If a constructor fails, throw a fatal_construction_exception if the failure is non-
recoverable. Otherwise throw an appropriate exception.

Member initializer list starting token `:` should be placed on same line as closing parenthesis.

Member initializer list should only be used for trivial initialization. Anything that requires
work or reaching outside LE (such as an external API call) should be done in the constructor
body.

**** Header file ordering ****
License

includes

// fwd-decl
forward declarations

class
{
  typedefs

public:
  constructors
  general methods
  getters/setters
  static methods
  variables
private:
  same as public
}

**** Include order ****

.h
- c/c++ std headers
- 3rd party libraries
- files from other modules within this engine
- files from this module

.cpp
- this
- same as .h

**** C vs C++ ****
Always select C++ over C when feasible. This will be done as a learning experience as I have
always done the opposite in the past.

**** class vs struct ****
struct should only be used for POD types with no (or very few) member functions and public data.
class should be used for everything else.

**** const Correctness ****
Always use logical const correctness.

**** General 3rd Party API Rules ****

Member variables that are used to store a handle to resources from some external API, should be
marked as "raw" (ex. p_raw_window).

Getters to these resources should be named "get_raw". Avoid these getters where possible by
properly wrapping needed functionality. For APIs where the raw resource is an integer handle 
const would mean nothing on these functions since the API can be called directly with the
handle. If possible try to avoid raw getters (perhaps making the special case that needs
it a friend, by creating static methods where a global function needs a resource, 
or by some other method). Otherwise it's a matter of trusting the client to not directly use the
API.

**** OpenGL Wrapping ****
OpenGL types should be openly used (including enums etc), as wrapping them gives no immediate
(since I will not be switching renderers). OpenGL objects however, should be always be wrapped.

Stick close to OpenGL functionality when naming and choosing functionality of wrapper classes.
Use OpenGL terminology where appropriate to be very clear what is being done in a function.
One place to stray from OpenGL naming is in the case of cruft (which OpenGL has much of). In
this case choose a name that describes what the API actually does or requires.

Since OpenGL uses a lot of global state, wrapping it while still providing an accurate idea of
the state changes going on underneath will not be trivial. Some rules to help:
- If a function logically changes an attribute of some object (shader_program, VAO, FBO, etc)
  it should be a member function. Its const-ness should be based on whether it changes 
  underlying OpenGL state **directly related to the object**.
- If a function changes global state (buffer/texture/fbo bindings, which shader is being used, 
  etc.) it should be a static function for the appropriate class OR a manager class of some 
  sort.

OpenGL wrapers should always be non-copyable (no copy constructor or assignment operatior).
They however have explicit functions to facilitate copying of the underlying OpenGL resource.
